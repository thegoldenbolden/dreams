generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  slumbers      Slumber[]
  dreams        Dream[]
  notes         Note[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())

  @@map("users")
}

model Slumber {
  id     String   @unique @default(cuid())
  start  DateTime
  end    DateTime
  rating Int?
  notes  Note[]
  dreams Dream[]
  user   User     @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
  @@map("slumbers")
}

model Dream {
  id        String  @id @default(cuid())
  title     String
  content   String  @db.Text
  rating    Int?
		tags      Tag[]
  slumber   Slumber @relation(fields: [slumberId], references: [id], onDelete: Cascade)
  slumberId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([slumberId])
  @@index([userId])
  @@map("dreams")
}

model Note {
  id        String  @id @default(cuid())
  content   String  @db.Text
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  slumber   Slumber @relation(fields: [slumberId], references: [id], onDelete: Cascade)
  slumberId String

  @@index([userId])
  @@index([slumberId])
  @@map("notes")
}


model Tag {
	name String @id
	dreams Dream[]
}